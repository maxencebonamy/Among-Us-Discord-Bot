/* eslint-disable max-len */

import type { PrismaClient, TaskLevel } from "@prisma/client"
import type { Room } from "./rooms"

type TaskData = {
	name: string
	description: string
	level: TaskLevel
	room: Room
	emoji: string
}

const TASKS: TaskData[] = [
	{
		name: "Docteur Maboul",
		description: "Retirer X items du corps sans faire sonner le jeu. Sinon il faut recommencer les X items. Les X items sont au choix du joueur.",
		level: "EASY",
		room: "H√¥pital",
		emoji: "ü©π"
	},
	{
		name: "Dossier √† reconstituer",
		description: "Le joueur soit reconstituer un dossier en allant les chercher les X pages dans la salle hant√©e, il doit apr√®s ramener le dossier constitu√© dans la salle de stockage aupr√®s du Modo.",
		level: "HARD",
		room: "Stockage",
		emoji: "üìÇ"
	},
	{
		name: "Document officiel",
		description: "Le joueur doit r√©cup√©rer un exemplaire officiel d'un document dans le centre de contr√¥le et le replacer dans la pochette correspondante dans la salle de stockage.",
		level: "EASY",
		room: "Stockage",
		emoji: "üìÑ"
	},
	{
		name: "Jeu du dino",
		description: "Le joueur doit r√©aliser un score de X pour valider la t√¢che.",
		level: "EASY",
		room: "Jungle",
		emoji: "ü¶ñ"
	},
	{
		name: "Lancer de pochons",
		description: "Le joueur doit remonter X canards pour valider la t√¢che.",
		level: "EASY",
		room: "Pont sup√©rieur",
		emoji: "üí∞"
	},
	{
		name: "Space Invaders",
		description: "Le joueur doit atteindre X en score au jeu.",
		level: "EASY",
		room: "Retro",
		emoji: "üëæ"
	},
	{
		name: "C√¢bles",
		description: "Le joueur passe derri√®re la borne d'arcade et doit rebrancher les c√¢bles. Le modo valide le branchement.",
		level: "EASY",
		room: "Retro",
		emoji: "üîå"
	},
	{
		name: "Lodidibon",
		description: "Le joueur remplit son jerrycan au premier √©tage devant les toilettes, il doit aller le vider au rdc vers les toilettes.",
		level: "HARD",
		room: "Pont inf√©rieur",
		emoji: "‚õΩ"
	},
	{
		name: "Cl√© USB",
		description: "Le joueur doit retrouver une cl√© USB (qui porte sa couleur) dans la salle hant√©e, et doit aller la brancher dans le centre de contr√¥le. Il recherche alors dans son contenu le code cach√©.",
		level: "HARD",
		room: "Centre de contr√¥le",
		emoji: "üíæ"
	},
	{
		name: "Mini Cluedo",
		description: "Le joueur doit fouiller la salle hant√©e afin de trouver des indices sur le coupable. Il doit les m√©moriser et aller au bureau de l'inspecteur pour consulter les diff√©rents suspects. Il doit alors dire au modo le nom du coupable et l'arme du crime.",
		level: "HARD",
		room: "Bureau",
		emoji: "üîç"
	},
	{
		name: "Crack the code",
		description: "Le joueur doit ouvrir le cadenas √† code pr√©sent dans la pi√®ce, en utilisant les diff√©rents indices qui seront accroch√©s sur les murs ou sur le bureau.",
		level: "HARD",
		room: "Bureau",
		emoji: "üîê"
	},
	{
		name: "Boules",
		description: "Le joueur doit retrouver la balle avec le num√©ro qui lui a √©t√© attribu√© et la montrer au modo.",
		level: "HARD",
		room: "Salle de jeu",
		emoji: "üé±"
	},
	{
		name: "Anneaux",
		description: "Le joueur doit r√©ussir √† placer X anneaux autours du poteau. Le joueur est plac√© a une certaine distance du poteau.",
		level: "EASY",
		room: "Salle de jeu",
		emoji: "‚≠ï"
	},
	{
		name: "Puzzle",
		description: "Le joueur doit r√©aliser un puzzle (entre 20 et 30 pi√®ces) et montrer le r√©sultat final au modo.",
		level: "HARD",
		room: "Salle de jeu",
		emoji: "üß©"
	},
	{
		name: "Beer Pong",
		description: "Le joueur doit lancer X balles dans des gobelets pos√©s sur une table √† une certaine distance",
		level: "EASY",
		room: "R√©fectoire",
		emoji: "üç∫"
	},
	{
		name: "Recettes de cuisine",
		description: "Le joueur doit r√©aliser une recette de cuisine, le modo valide la recette.",
		level: "HARD",
		room: "R√©fectoire",
		emoji: "üç≥"
	}
] as const

export const seedTasks = async(prisma: PrismaClient): Promise<void> => {
	console.log("Seeding tasks...")

	await prisma.task.deleteMany({})

	await Promise.all(
		TASKS.map(async(taskData) => {
			await prisma.task.create({
				data: {
					name: taskData.name,
					description: taskData.description,
					level: taskData.level,
					room: { connect: { name: taskData.room } },
					emoji: taskData.emoji
				}
			})
		})
	)

	console.log("Seeding tasks completed ‚úÖ")
}