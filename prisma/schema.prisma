// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    relationModel         = true
    modelCase             = "PascalCase"
    modelSuffix           = "Schema"
    useDecimalJs          = true
    imports               = null
    prismaJsonNullability = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlayerRole {
    CREWMATE
    IMPOSTOR
}

enum TaskLevel {
    EASY
    MEDIUM
    HARD
}

enum GameStatus {
    WAITING
    STARTED
    FINISHED
}

model Config {
    key   String  @id
    value String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Game {
    id      Int        @id @default(autoincrement())
    status  GameStatus @default(WAITING)
    tasks   Task[]
    players Player[]
    modos   Modo[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id        Int    @id @default(autoincrement())
    discordId String @unique
    name      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    player Player[]
    modo   Modo[]
}

model Player {
    user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    role  PlayerRole
    alive Boolean    @default(true)
    game  Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
    tasks Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int @id
    gameId Int
}

model Modo {
    user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    admin Boolean @default(false)
    game  Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    tasks Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId Int @id
    gameId Int
}

model Task {
    id         Int             @id @default(autoincrement())
    done       Boolean         @default(false)
    game       Game            @relation(fields: [gameId], references: [id], onDelete: Cascade)
    player     Player          @relation(fields: [playerId], references: [userId], onDelete: Cascade)
    modo       Modo            @relation(fields: [modoId], references: [userId], onDelete: Cascade)
    type       TaskType        @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
    parameters TaskParameter[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    gameId     Int
    playerId   Int
    modoId     Int
    taskTypeId Int
}

model Room {
    id   Int    @id @default(autoincrement())
    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskType {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    level       TaskLevel
    tasks       Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskParameter {
    key   String  @id
    value String?
    task  Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    taskId Int
}
