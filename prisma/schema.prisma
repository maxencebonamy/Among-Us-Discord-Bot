// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    relationModel         = true
    modelCase             = "PascalCase"
    modelSuffix           = "Schema"
    useDecimalJs          = true
    imports               = null
    prismaJsonNullability = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlayerRole {
    CREWMATE
    IMPOSTOR
}

enum TaskLevel {
    EASY
    MEDIUM
    HARD
}

enum GameStatus {
    WAITING
    RUNNING
    FINISHED
    PAUSED
    CANCELED
}

enum CooldownType {
    KILL
}

model Config {
    key   String  @id
    value String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Game {
    id      Int        @id @default(autoincrement())
    status  GameStatus @default(WAITING)
    players Player[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id        Int      @id @default(autoincrement())
    discordId String   @unique
    name      String
    player    Player[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Player {
    id        Int         @id @default(autoincrement())
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      PlayerRole
    alive     Boolean     @default(true)
    game      Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
    channelId String
    color     PlayerColor @relation(fields: [colorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId         Int
    gameId         Int
    playerTask     PlayerTask[]
    playerCooldown PlayerCooldown[]
    colorId        Int
}

model PlayerColor {
    id    Int    @id @default(autoincrement())
    name  String
    hex   String
    emoji String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Player    Player[]
}

model Task {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    level       TaskLevel
    channelId   String?

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    playerTask PlayerTask[]
    roomTask   RoomTask[]
}

model Room {
    id        Int     @id @default(autoincrement())
    name      String
    channelId String?

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    roomTask  RoomTask[]
}

model PlayerTask {
    player Player  @relation(fields: [playerId], references: [id])
    task   Task    @relation(fields: [taskId], references: [id])
    done   Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    playerId Int
    taskId   Int

    @@id([playerId, taskId])
}

model Cooldown {
    id             Int              @id @default(autoincrement())
    type           CooldownType
    expiresAt      DateTime
    playerCooldown PlayerCooldown[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PlayerCooldown {
    player   Player   @relation(fields: [playerId], references: [id])
    cooldown Cooldown @relation(fields: [cooldownId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    playerId   Int
    cooldownId Int

    @@id([playerId, cooldownId])
}

model RoomTask {
    room Room @relation(fields: [roomId], references: [id])
    task Task @relation(fields: [taskId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    roomId Int
    taskId Int

    @@id([roomId, taskId])
}
