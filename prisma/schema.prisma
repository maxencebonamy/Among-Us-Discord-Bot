// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider              = "zod-prisma"
    output                = "./zod"
    relationModel         = true
    modelCase             = "PascalCase"
    modelSuffix           = "Schema"
    useDecimalJs          = true
    imports               = null
    prismaJsonNullability = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PlayerRole {
    CREWMATE
    IMPOSTOR
}

enum TaskLevel {
    EASY
    HARD
}

enum GameStatus {
    WAITING
    RUNNING
    FINISHED
    PAUSED
    CANCELED
}

model Config {
    key   String  @id
    value String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Game {
    id      Int        @id @default(autoincrement())
    status  GameStatus @default(WAITING)
    players Player[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    vote      Vote[]
}

model User {
    id        Int      @id @default(autoincrement())
    discordId String   @unique
    name      String
    player    Player[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Player {
    id                   Int         @id @default(autoincrement())
    user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    role                 PlayerRole
    alive                Boolean     @default(true)
    game                 Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
    channelId            String
    color                PlayerColor @relation(fields: [colorId], references: [id], onDelete: Cascade)
    actionMessageId      String?
    progressionMessageId String?
    reportCode           String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId      Int
    gameId      Int
    playerTask  PlayerTask[]
    colorId     Int
    voteTargets PlayerVote[] @relation("target")
    voteAuthors PlayerVote[] @relation("author")
    votes       Vote[]
}

model PlayerColor {
    id    Int    @id @default(autoincrement())
    name  String
    hex   String
    emoji String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    player    Player[]
}

model Task {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    level       TaskLevel
    channelId   String?
    room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    emoji       String

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    playerTask PlayerTask[]
    roomId     Int
}

model Room {
    id        Int     @id @default(autoincrement())
    name      String  @unique
    channelId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tasks     Task[]
}

model PlayerTask {
	id              Int     @id @default(autoincrement())
    player          Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
    task            Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
    done            Boolean @default(false)
    playerMessageId String?
    modoMessageId   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    playerId Int
    taskId   Int
}

model Vote {
    id               Int     @id @default(autoincrement())
    game             Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    eliminatedPlayer Player? @relation(fields: [eliminatedPlayerId], references: [id], onDelete: SetNull)
    finished         Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    gameId             Int
    eliminatedPlayerId Int?
    playerVotes        PlayerVote[]
}

model PlayerVote {
    id     Int     @id @default(autoincrement())
    author Player  @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "author")
    target Player? @relation(fields: [targetId], references: [id], onDelete: Cascade, name: "target")
    vote   Vote    @relation(fields: [voteId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authorId Int
    targetId Int?
    voteId   Int
}
